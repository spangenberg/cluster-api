#!/usr/bin/ansible-playbook
#
# Deploy Cluster Operator to the cluster for the current users kubeconfig context.
#
# Several pieces of secret data (certs, ssh keys) are assumed to be shared amongst the team
# maintaining the deployment. As such the playbook checks if they exist, if they do not it
# attempt to generate/create them. Some of these steps may require local setup. However once
# the secrets are created initially, the deployment ansible will leave them be and other
# members of the team can update the deployment without needing to locally have the shared
# SSH key or AWS credentials.
---
- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    # Namespace to deploy CO to:
    cluster_operator_namespace: "openshift-cluster-operator"
    # Force regeneration of apiserver cluster cert. Will happen regardless if one does not exist.
    # found to not exist.
    redeploy_apiserver_cert: False
    # Whether or not we should process the template with cluster roles, service accounts, etc.
    # These are separated for deployments where a cluster admin may need to set these up one time,
    # but users with lesser permissions can maintain the actual deployment itself.
    deploy_roles: True
    # Paths where we will generate self-signed certs for the apiserver cluster.
    apiserver_cert_dir: "{{ playbook_dir }}/../../certs"
    # This CA will be generated once and then re-used for all certs. Will be created
    # in the cert dir defined above.
    apiserver_ca_name: ca
    # Cluster operator git repository to build:
    cluster_operator_git_repo: "https://github.com/openshift/cluster-operator"
    cluster_operator_git_ref: master
    # Cluster API controller image to deploy on root cluster
    cluster_api_image: "registry.svc.ci.openshift.org/openshift-cluster-operator/kubernetes-cluster-api:latest"
    cluster_api_image_pull_policy: "Always"

    fake_deployment: False
    machine_controller_imagestream: "cluster-operator"
    machine_controller_entrypoint: "/opt/services/aws-machine-controller"

  tasks:
  - import_role:
      name: kubectl-ansible
  - set_fact:
      cluster_operator_namespace: "{{ cli_cluster_operator_namespace }}"
    when: cli_cluster_operator_namespace is defined

  - name: set AWS machine controller image
    set_fact:
      machine_controller_imagestream: "fake-machine-controller"
      machine_controller_entrypoint: "/opt/services/fake-machine-controller"
    when: fake_deployment | bool

  - name: check if cluster operator namespace exists
    command: "oc get namespace {{ cluster_operator_namespace }}"
    failed_when: false
    changed_when: false
    register: namespace_exists_reg

  - name: create the cluster operator namespace
    kubectl_apply:
      definition:
        kind: "Namespace"
        apiVersion: v1
        metadata:
          name: "{{ cluster_operator_namespace }}"
    when: namespace_exists_reg.rc > 0 and "NotFound" in namespace_exists_reg.stderr

  - name: check if apiserver cert secret exists
    command: "oc get secret cluster-operator-apiserver-cert -n {{ cluster_operator_namespace }}"
    failed_when: false
    changed_when: false
    register: apiserver_cert_exists_reg

  - set_fact:
      redeploy_apiserver_cert: True
    when: apiserver_cert_exists_reg.rc > 0 and "NotFound" in apiserver_cert_exists_reg.stderr

  - name: ensure certs directory exists
    file:
      path: "{{ apiserver_cert_dir }}"
      state: directory

  - include_role:
      name: cluster_operator_certgen
    vars:
      certgen_cert_dir: "{{ apiserver_cert_dir }}"
      certgen_ca_name: "{{ apiserver_ca_name }}"
      certgen_cert_name: "apiserver"
      certgen_cn: cluster-operator-apiserver
      certgen_alt_names: "\"cluster-operator-apiserver.{{ cluster_operator_namespace }}\",\"cluster-operator-apiserver.{{ cluster_operator_namespace }}.svc\""

  # These are expected locations of the files given the directory and names provided when
  # we called the role.
  - name: set implicit cert path facts
    set_fact:
      apiserver_cert_path: "{{ apiserver_cert_dir }}/apiserver.pem"
      apiserver_privatekey_path: "{{ apiserver_cert_dir }}/apiserver-key.pem"
      apiserver_ca_path: "{{ apiserver_cert_dir }}/{{ apiserver_ca_name }}.pem"

  - set_fact:
      # base-64-encoded, pem CA cert for the ssl certs
      l_serving_ca: "{{ lookup('file', apiserver_ca_path) | b64encode }}"
      # base-64-encoded, pem cert to use for ssl communication with the Cluster Operator API Server
      l_serving_cert: "{{ lookup('file', apiserver_cert_path) | b64encode }}"
      # base-64-encoded, pem private key for the cert to use for ssl communication with the Cluster Operator API Server.
      l_serving_key: "{{ lookup('file', apiserver_privatekey_path) | b64encode }}"
    when: redeploy_apiserver_cert | bool

  - name: create apiserver cert secret
    kubectl_apply:
      definition:
        # Secret to pass the SSL certs to the API Server
        apiVersion: v1
        kind: Secret
        metadata:
          name: cluster-operator-apiserver-cert
          namespace: "{{ cluster_operator_namespace }}"
          labels:
            app: cluster-operator-apiserver
        type: Opaque
        data:
          tls.crt: "{{ l_serving_cert }}"
          tls.key: "{{ l_serving_key }}"
          ca.crt: "{{ l_serving_ca }}"
    when: redeploy_apiserver_cert | bool

  - name: load serving CA from secret
    command: "oc get secret -n {{ cluster_operator_namespace }} cluster-operator-apiserver-cert -o json"
    register: cluster_cert_secret_reg
    changed_when: false

  # Ensure l_serving_ca is set even if we did not regen certs, as it's needed for the apiserver aggregation:
  - set_fact:
      l_serving_ca: "{{ (cluster_cert_secret_reg.stdout | from_json)['data']['ca.crt'] }}"

  - name: process authentication template
    oc_process:
      template_file: "{{ playbook_dir }}/../examples/cluster-operator-roles-template.yaml"
      namespace: "{{ cluster_operator_namespace }}"
      parameters:
        CLUSTER_OPERATOR_NAMESPACE: "{{ cluster_operator_namespace }}"
    register: auth_reg
    when: deploy_roles | bool

  - name: deploy authentication objects
    kubectl_apply:
      definition: "{{ auth_reg.result | to_json }}"
    when: deploy_roles | bool

  - name: process cluster operator application template
    oc_process:
      template_file: "{{ playbook_dir }}/../examples/cluster-operator-template.yaml"
      parameters:
        CLUSTER_OPERATOR_NAMESPACE: "{{ cluster_operator_namespace }}"
        SERVING_CA: "{{ l_serving_ca }}"
        GIT_REPO: "{{ cluster_operator_git_repo }}"
        GIT_REF: "{{ cluster_operator_git_ref }}"
    register: cluster_app_reg

  - name: deploy cluster operator
    kubectl_apply:
      definition: "{{ cluster_app_reg.result | to_json }}"

  - name: process cluster-api controllers template
    oc_process:
      template_file: "{{ playbook_dir }}/../examples/cluster-api-controllers-template.yaml"
      parameters:
        CLUSTER_API_NAMESPACE: "{{ cluster_operator_namespace }}"
        CLUSTER_API_IMAGE: "{{ cluster_api_image }}"
        MACHINE_CONTROLLER_IMAGESTREAM: "{{ machine_controller_imagestream }}"
        MACHINE_CONTROLLER_ENTRYPOINT: "{{ machine_controller_entrypoint }}"
        IMAGE_PULL_POLICY: "{{ cluster_api_image_pull_policy }}"
    register: cluster_api_controllers

  - name: deploy cluster api controllers
    kubectl_apply:
      definition: "{{ cluster_api_controllers.result | to_json }}"
